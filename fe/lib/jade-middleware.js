/*!
 * Less - middleware (adapted from the stylus middleware)
 *
 * Original Copyright(c) 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

var jade = require('jade'),
    fs = require('fs'),
    url = require('url'),
    path = require('path'),
    mkdirp = require('mkdirp');

// Import map
var imports = {};

/**
 * Return Connect middleware with the given `options`.
 *
 * Options:
 *
 *    `force`           Always re-compile
 *    `once`            Only re-compile the one time
 *    `debug`           Output debugging information
 *    `src`             Source directory used to find .jade files
 *    `dest`            Destination directory used to output .js files
 *                      when undefined defaults to `src`.
 *    `compress`        Whether the output .js files should be compressed
 *    `optimization`    The desired value of the jade optimization option (0, 1, or 2. 0 is default)
 *
 * Examples:
 *
 * Pass the middleware to Connect, grabbing .jade files from this directory
 * and saving .js files to _./public_. Also supplying our custom `compile` function.
 *
 * Following that we have a `static` layer setup to serve the .js
 * files generated by Less.
 *
 *      var server = connect.createServer(
 *          jade.middleware({
 *              src: __dirname + '/public',
 *              compress: true
 *          })
 *        , connect.static(__dirname + '/public')
 *      );
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */
module.exports = jade.middleware = function(options){
  var regex = {
    handle: /\.js$/,
    compress: /(\.|-)min\.js$/
  };

  options = options || {};

  // Accept src/dest dir
  if ('string' === typeof options) {
    options = { src: options };
  }

  // Only log if in debug mode
  var log = function(key, val) {
    if(options.debug) console.log('  \033[90m%s :\033[0m \033[36m%s\033[0m', key, val);
  };

  // Check imports for changes
  var checkImports = function(path, next) {
    var nodes = imports[path];

    if (!nodes || !nodes.length) {
      return next();
    }

    var pending = nodes.length;
    var changed = [];

    nodes.forEach(function(imported){
      fs.stat(imported.path, function(err, stat) {
        // error or newer mtime
        if (err || !imported.mtime || stat.mtime > imported.mtime) {
          changed.push(imported.path);
        }

        --pending || next(changed);
      });
    });
  }

  // Once option
  options.once = options.once || false;

  // Compress option
  options.compress = typeof options.compress === 'undefined' ? 'auto' : options.compress;

  // Optimization option
  options.optimization = options.optimization || 0;

  // Source dir required
  var src = options.src;
  if (!src) { throw new Error('jade.middleware() requires "src" directory'); }

  // Default dest dir to source
  var dest = options.dest ? options.dest : src;

  // Default compile callback
  options.render = options.render || function(str, jadePath, jsPath, callback) {
    var js = jade.compile(str, {
      client: true
    });
    js = 'define(["jade"], function() {\n' + js + '\nreturn anonymous;\n});';
    var err = null; // FIX ME

    fs.stat(jsPath, function(err, stats) {
      if (err) return callback(null, js);
      callback(err, js);
    });
  };

  // Middleware
  return function(req, res, next) {
    if ('GET' != req.method && 'HEAD' != req.method) { return next(); }

    var pathname = url.parse(req.url).pathname;

    // Only handle the matching files
    if (regex.handle.test(pathname)) {
      var jsPath = path.join(dest, pathname);
      var jadePath = path.join(src, (
        regex.compress.test(pathname)
        ? pathname.replace(regex.compress, '.jade')
        : pathname.replace('.js', '.jade'
      )));

      log('source', jadePath);
      log('dest', jsPath);

      // Ignore ENOENT to fall through as 404
      var error = function(err) {
        return next('ENOENT' == err.code ? null : err);
      };

      // Compile to jsPath
      var compile = function() {
        log('read', jadePath);

        fs.readFile(jadePath, 'utf8', function(err, str){
          if (err) { return error(err); }

          delete imports[jadePath];

          options.render(str, jadePath, jsPath, function(err, js){
            if (err) { return next(err); }

            log('render', jadePath);

            mkdirp(path.dirname(jsPath), 0777, function(err){
              if (err) return error(err);

              fs.writeFile(jsPath, js, 'utf8', next);
            });
          });
        });
      };

      // Force
      if (options.force) { return compile(); }

      // Re-compile on server restart, disregarding
      // mtimes since we need to map imports
      if (!imports[jadePath]) { return compile(); }

      // Only check/recompile if it has not been done at before
      if (options.once && imports[jadePath]) { return next(); }

      // Compare mtimes
      fs.stat(jadePath, function(err, jadeStats){
        if (err) { return error(err); }

        fs.stat(jsPath, function(err, jsStats){
          // CSS has not been compiled, compile it!
          if (err) {
            if ('ENOENT' == err.code) {
              log('not found', jsPath);

              // No CSS file found in dest
              return compile();
            } else {
              return next(err);
            }
          } else if (jadeStats.mtime > jsStats.mtime) {
            // Source has changed, compile it
            log('modified', jsPath);

            return compile();
          } else {
            // Check if any of the jade imports were changed
            checkImports(jadePath, function(changed){
              if(typeof changed != "undefined" && changed.length) {
                log('modified import', changed);

                return compile();
              }

              return next();
            });
          }
        });
      });
    } else {
      return next();
    }
  };
};
